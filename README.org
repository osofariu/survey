* Survey 

- a survey is made up of questions
- each question has:
    - a unique tag
    - a function to record the answer
    - an optional condition expression

- the expression is a lisp-style expression:
    - and | or
    - equals
    - includes
    - (answer TAG) : get the answer from question TAG
    - (active TAG) : evaluate question TAG to see if it's active

- when a question records an answer
    - go through the questions that follow, and evaluate all optional condition to see if 
      any of the conditions cause questions to be disabled
    - if any question changes its state recurse into the following questions..

** ConditionalExpression

Conditions can be nested indefinitely as long as they conform to the grammar
for this conditonal expression.

I should define the grammar more formally, but the few examples below will help
illustrate what you can do with conditions.

*** equals -- compares two string expressions

#+BEGIN_SRC js
    const exp1 = "(equals 'a', 'b')"
    new ConditionalExpression(new Survey()).evaluate(exp1) == false

    const exp2 = "(equals 'a', 'a')"  => true
    new ConditionalExpression(new Survey()).evaluate(exp2) == true
#+END_SRC

*** not -- negates an expression that it wraps

#+BEGIN_SRC js
    const exp = "(not (equals 'a', 'b'))"
    new ConditionalExpression(new Survey()).evaluate(exp) == true
#+END_SRC

*** answer
    it needs to look up an answer in the survey and return the value

#+BEGIN_SRC js
    const question: Question = {
      tag: "q1",
      conditionExp: exp,
    };
    const survey = new Survey().question(question);
    survey.recordAnswer('q1', 'hello')
    const exp1 = "(equals (answer q1), 'hello')"
    new ConditionalExpression(survey).evaluate(exp1) == true
    const exp2 = "(equals (answer q1), 'hellowse')"
    new ConditionalExpression(survey).evaluate(exp2) == false
#+END_SRC

*** includes - similar to equal, but it looks up a string in a list of strings

#+BEGIN_SRC js
    // simple example:
    const exp1 = "(includes ['a', 'b'], 'b')"
    new ConditionalExpression(new Survey()).evaluate(exp1) == true

    // with answer:
    const question: Question = {
      tag: "q1",
    };
    const survey = new Survey().question(question);
    survey.recordAnswer('q1', ['a', 'b'])

    const exp2 = "(includes (answer q1), 'c')"
    new ConditionalExpression(survey).evaluate(exp2) == false
#+END_SRC

*** and
    - expects two expressions
    - evaluates them left to right
    - stops the valuation if it detects false and returns false
    - this example pulls in multiple expressions to make it more interesting
#+BEGIN_SRC js
    const question1: Question = {
      tag: "q1",
      conditionExp: exp,
    };
    const question2: Question = {
      tag: "q2",
      conditionExp: exp,
    };
    const survey = new Survey().question(question1).question(question2);
    survey.recordAnswer('q1', 'hello')
    survey.recordAnswer('q2', 'there') 
    const exp = "(not (and (equals (answer q1), "hello"), (equals 'there', (answer q2))))" 
    new ConditionalExpression(survey).evaluate(exp) == false
#+END_SRC

*** or
    - expects two expressions
    - evaluates them left to right
    - stops the valuation if it detects true and returns true
