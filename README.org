* Survey 

** High-level introduction

This library is intended to track the state of a survey that has complex dependencies between its questions.  The main purpose is to enable or disable dependent questions as the user provides answers to questions.

In order to define the relationship between question we have introduced an /expression language/ that is just rich enough to give the user a flexible way to express relationships.  

** Key Features

- Rules are defined ahead of time, and provided to the /survey/.  This means that rules can be managed outside of code

- The /expression language/ for the rules is flexible and can arbitrarily complex, as long as they comply with the grammar.

- The /expression language/ is applied as a /condition/ string associated with each question.  Here are the high-level rules of the language:
    - logical rules (combine multiple expressions)
        - and
        - or
        - not
    - comparison rules (works with strings and numbers)
        - equal (for numbers and strings)
        - less than (for numbers)
        - greater than (for numbers)
        - includes (a value appears in a list of values)
        - isAnswered (a prior /question/ has been answer)
    - answer 
        - look up answer to a prior /question/ as a number, string, or array of numbers or strings

- The /survey/ disables dependent questions according to the following rules:
    - if the condition associated with a question evaluates to false, then the question becomes disabled
    - if a question becomes disabled then all the subsequent questions that *depend* on it also become disabled
        - a question /depends/ on another question if it mentions the other question somewhere in its conditional expression


** The Expression language

Conditions can be nested indefinitely as long as they conform to the grammar for this conditonal expression. The [[https://osofariu.github.io/random/syntax_diagrams.html][Syntax Diagram]] rules show the grammar in a more visual way.

Below is an example of how to use the expression language.  It shows how dependent questions are disabled when their conditions are not met.

#+BEGIN_SRC js
    const survey = new Survey();
    survey
      .question({ tag: "q1" })
      .question({ tag: "q2", condition: "(> (answer q1) 99)" })
      .question({ tag: "q3", condition: "(includes (arrayAnswer q2) 'red')",})
      .question({ tag: "q4", condition: "(isAnswered q1)" })
      .question({ tag: "q5", condition: "(isAnswered q2)" });

    survey.recordAnswer("q1", 99);
    survey.recordAnswer("q2", ["blue", "red"]);

    const enabledQuestions = survey.traverse((q) => q.enabled);
    expect(enabledQuestions.map((q) => q.tag)).toEqual(["q1", "q4"]);
#+END_SRC

As you can see, /q2/ became disabled after it was answered, and /q3/ became disabled because /q2/ was disabled.  Question /q5/ became disabled because it depends on /q2/ and /q2/ was disabled.
