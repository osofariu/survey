# Survey Builder

- a survey is made up of questions
- each question has:
    - a unique tag
    - a function to record the answer  (answer)
        - lets 
    - a required flag (can this be skipped)
        - if question shows up then the answer is required
    - an optional condition expression (condition)

- the expression is a lisp-style expression, with parenthesis for each part:
    - and | or
    - equals
    - includes
    - (answer TAG) : get the answer from question TAG
    - (active TAG) : evaluate question TAG to see if it's active

- when a question records an answer
    - go through the questions that follow, and evaluate all optional condition to see if 
      any of the conditions cause questions to be disabled
    - if any question changes its state recurse into the following questions..
        - what does this fix?


## ConditionalExpression

## Expression Builder

Examples of condition expressions:

1. equals -- compares two string expressions

const exp1 = "(equals 'a' 'b')"
new ConditionalExpression(exp1, new Builder()).evaluate() == false

const exp2 = "(equals 'a' 'a')"  => true
new ConditionalExpression(exp2, new Builder()).evaluate() == true


2. not -- negates an expression that it wraps
const exp3 = "(not (equals 'a' 'b'))"
new ConditionalExpression(exp3, new Builder()).evaluate() == true

3. answer

    it needs to look up an answer in the survey and return the value

    const question: Question = {
      tag: "q1",
      conditionExp: exp,
    };
    const survey = new Survey().question(question);
    survey.recordAnswer('q1', 'hello')
    const exp4 = "(equals (answer 'q1') 'hello')"
    new ConditionalExpression(exp4, survey).evaluate() == true
    const exp5 = "(equals (answer 'q1') 'hellowse')"
    new ConditionalExpression(exp5, survey).evaluate() == false

4. includes - similar to equal, but it looks up a string in a list of strings

    const exp5 = "(includes 'b' ['a', 'b'])"
    new ConditionalExpression(exp6, new Builder()).evaluate() == false
    (includes (answer 'Q3') '20')

    const question: Question = {
      tag: "q1",
    };
    const survey = new Survey().question(question);
    survey.recordAnswer('q1', ['a', 'b'])
    
    const exp6 = "(includes 'b' (answer 'q1'))"
    new ConditionalExpression(exp4, survey).evaluate() == true

    const exp7 = "(includes 'c' (answer 'q1'))"
    new ConditionalExpression(exp4, survey).evaluate() == false

5. and
    - expects two expressions
    - evaluates them left to right
    - stops the valuation if it detects false and returns false

    const question: Question = {
      tag: "q1",
      conditionExp: exp,
    };
    const survey = new Survey().question(question);
    survey.recordAnswer('q1', 'hello')
    const exp8 = "(and (equals 'a' 'a') (equals 'hello' (answer 'q1')))" 
    new ConditionalExpression(exp8, new Builder()).evaluate() == true

6. or
    - expects two expressions
    - evaluates them left to right
    - stops the valuation if it detects true and returns true
